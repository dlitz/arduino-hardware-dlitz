
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00007e00  00007e00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00007fe8  00007fe8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000df8  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fb0  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    7e00:	01 c0       	rjmp	.+2      	; 0x7e04 <main>
    7e02:	e2 c0       	rjmp	.+452    	; 0x7fc8 <do_spm>

00007e04 <main>:
    7e04:	11 24       	eor	r1, r1
    7e06:	84 b7       	in	r24, 0x34	; 52
    7e08:	88 23       	and	r24, r24
    7e0a:	61 f0       	breq	.+24     	; 0x7e24 <main+0x20>
    7e0c:	98 2f       	mov	r25, r24
    7e0e:	9a 70       	andi	r25, 0x0A	; 10
    7e10:	92 30       	cpi	r25, 0x02	; 2
    7e12:	41 f0       	breq	.+16     	; 0x7e24 <main+0x20>
    7e14:	81 ff       	sbrs	r24, 1
    7e16:	02 c0       	rjmp	.+4      	; 0x7e1c <main+0x18>
    7e18:	97 ef       	ldi	r25, 0xF7	; 247
    7e1a:	94 bf       	out	0x34, r25	; 52
    7e1c:	28 2e       	mov	r2, r24
    7e1e:	80 e0       	ldi	r24, 0x00	; 0
    7e20:	be d0       	rcall	.+380    	; 0x7f9e <watchdogConfig>
    7e22:	ee c0       	rjmp	.+476    	; 0x8000 <__VERSION_START__+0x2>
    7e24:	85 e0       	ldi	r24, 0x05	; 5
    7e26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__RAM__+0x81>
    7e2a:	82 e0       	ldi	r24, 0x02	; 2
    7e2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__RAM__+0xc0>
    7e30:	88 e1       	ldi	r24, 0x18	; 24
    7e32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__RAM__+0xc1>
    7e36:	86 e0       	ldi	r24, 0x06	; 6
    7e38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__RAM__+0xc2>
    7e3c:	85 e1       	ldi	r24, 0x15	; 21
    7e3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__RAM__+0xc4>
    7e42:	8e e0       	ldi	r24, 0x0E	; 14
    7e44:	ac d0       	rcall	.+344    	; 0x7f9e <watchdogConfig>
    7e46:	25 9a       	sbi	0x04, 5	; 4
    7e48:	8a e0       	ldi	r24, 0x0A	; 10
    7e4a:	2c e3       	ldi	r18, 0x3C	; 60
    7e4c:	3b ef       	ldi	r19, 0xFB	; 251
    7e4e:	91 e0       	ldi	r25, 0x01	; 1
    7e50:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__RAM__+0x85>
    7e54:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__RAM__+0x84>
    7e58:	96 bb       	out	0x16, r25	; 22
    7e5a:	b0 9b       	sbis	0x16, 0	; 22
    7e5c:	fe cf       	rjmp	.-4      	; 0x7e5a <main+0x56>
    7e5e:	1d 9a       	sbi	0x03, 5	; 3
    7e60:	a8 95       	wdr
    7e62:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    7e66:	47 fd       	sbrc	r20, 7
    7e68:	02 c0       	rjmp	.+4      	; 0x7e6e <main+0x6a>
    7e6a:	81 50       	subi	r24, 0x01	; 1
    7e6c:	89 f7       	brne	.-30     	; 0x7e50 <main+0x4c>
    7e6e:	93 e0       	ldi	r25, 0x03	; 3
    7e70:	e9 2e       	mov	r14, r25
    7e72:	dd 24       	eor	r13, r13
    7e74:	d3 94       	inc	r13
    7e76:	25 e0       	ldi	r18, 0x05	; 5
    7e78:	c2 2e       	mov	r12, r18
    7e7a:	31 e1       	ldi	r19, 0x11	; 17
    7e7c:	b3 2e       	mov	r11, r19
    7e7e:	83 d0       	rcall	.+262    	; 0x7f86 <getch>
    7e80:	81 34       	cpi	r24, 0x41	; 65
    7e82:	59 f4       	brne	.+22     	; 0x7e9a <main+0x96>
    7e84:	80 d0       	rcall	.+256    	; 0x7f86 <getch>
    7e86:	18 2f       	mov	r17, r24
    7e88:	90 d0       	rcall	.+288    	; 0x7faa <verifySpace>
    7e8a:	83 e0       	ldi	r24, 0x03	; 3
    7e8c:	11 38       	cpi	r17, 0x81	; 129
    7e8e:	09 f4       	brne	.+2      	; 0x7e92 <main+0x8e>
    7e90:	88 e0       	ldi	r24, 0x08	; 8
    7e92:	72 d0       	rcall	.+228    	; 0x7f78 <putch>
    7e94:	80 e1       	ldi	r24, 0x10	; 16
    7e96:	70 d0       	rcall	.+224    	; 0x7f78 <putch>
    7e98:	f2 cf       	rjmp	.-28     	; 0x7e7e <main+0x7a>
    7e9a:	82 34       	cpi	r24, 0x42	; 66
    7e9c:	19 f4       	brne	.+6      	; 0x7ea4 <main+0xa0>
    7e9e:	84 e1       	ldi	r24, 0x14	; 20
    7ea0:	8c d0       	rcall	.+280    	; 0x7fba <getNch>
    7ea2:	f8 cf       	rjmp	.-16     	; 0x7e94 <main+0x90>
    7ea4:	85 34       	cpi	r24, 0x45	; 69
    7ea6:	11 f4       	brne	.+4      	; 0x7eac <main+0xa8>
    7ea8:	85 e0       	ldi	r24, 0x05	; 5
    7eaa:	fa cf       	rjmp	.-12     	; 0x7ea0 <main+0x9c>
    7eac:	85 35       	cpi	r24, 0x55	; 85
    7eae:	41 f4       	brne	.+16     	; 0x7ec0 <main+0xbc>
    7eb0:	6a d0       	rcall	.+212    	; 0x7f86 <getch>
    7eb2:	c8 2f       	mov	r28, r24
    7eb4:	68 d0       	rcall	.+208    	; 0x7f86 <getch>
    7eb6:	d8 2f       	mov	r29, r24
    7eb8:	cc 0f       	add	r28, r28
    7eba:	dd 1f       	adc	r29, r29
    7ebc:	76 d0       	rcall	.+236    	; 0x7faa <verifySpace>
    7ebe:	ea cf       	rjmp	.-44     	; 0x7e94 <main+0x90>
    7ec0:	86 35       	cpi	r24, 0x56	; 86
    7ec2:	21 f4       	brne	.+8      	; 0x7ecc <main+0xc8>
    7ec4:	84 e0       	ldi	r24, 0x04	; 4
    7ec6:	79 d0       	rcall	.+242    	; 0x7fba <getNch>
    7ec8:	80 e0       	ldi	r24, 0x00	; 0
    7eca:	e3 cf       	rjmp	.-58     	; 0x7e92 <main+0x8e>
    7ecc:	84 36       	cpi	r24, 0x64	; 100
    7ece:	09 f0       	breq	.+2      	; 0x7ed2 <main+0xce>
    7ed0:	34 c0       	rjmp	.+104    	; 0x7f3a <main+0x136>
    7ed2:	59 d0       	rcall	.+178    	; 0x7f86 <getch>
    7ed4:	58 d0       	rcall	.+176    	; 0x7f86 <getch>
    7ed6:	f8 2e       	mov	r15, r24
    7ed8:	56 d0       	rcall	.+172    	; 0x7f86 <getch>
    7eda:	a8 2e       	mov	r10, r24
    7edc:	00 e0       	ldi	r16, 0x00	; 0
    7ede:	11 e0       	ldi	r17, 0x01	; 1
    7ee0:	48 01       	movw	r8, r16
    7ee2:	8f ef       	ldi	r24, 0xFF	; 255
    7ee4:	88 1a       	sub	r8, r24
    7ee6:	98 0a       	sbc	r9, r24
    7ee8:	4e d0       	rcall	.+156    	; 0x7f86 <getch>
    7eea:	f8 01       	movw	r30, r16
    7eec:	80 83       	st	Z, r24
    7eee:	84 01       	movw	r16, r8
    7ef0:	f8 10       	cpse	r15, r8
    7ef2:	f6 cf       	rjmp	.-20     	; 0x7ee0 <main+0xdc>
    7ef4:	5a d0       	rcall	.+180    	; 0x7faa <verifySpace>
    7ef6:	f5 e4       	ldi	r31, 0x45	; 69
    7ef8:	af 12       	cpse	r10, r31
    7efa:	01 c0       	rjmp	.+2      	; 0x7efe <main+0xfa>
    7efc:	ff cf       	rjmp	.-2      	; 0x7efc <main+0xf8>
    7efe:	fe 01       	movw	r30, r28
    7f00:	e7 be       	out	0x37, r14	; 55
    7f02:	e8 95       	spm
    7f04:	07 b6       	in	r0, 0x37	; 55
    7f06:	00 fc       	sbrc	r0, 0
    7f08:	fd cf       	rjmp	.-6      	; 0x7f04 <main+0x100>
    7f0a:	fe 01       	movw	r30, r28
    7f0c:	a0 e0       	ldi	r26, 0x00	; 0
    7f0e:	b1 e0       	ldi	r27, 0x01	; 1
    7f10:	cd 01       	movw	r24, r26
    7f12:	02 96       	adiw	r24, 0x02	; 2
    7f14:	2d 91       	ld	r18, X+
    7f16:	3c 91       	ld	r19, X
    7f18:	09 01       	movw	r0, r18
    7f1a:	d7 be       	out	0x37, r13	; 55
    7f1c:	e8 95       	spm
    7f1e:	11 24       	eor	r1, r1
    7f20:	32 96       	adiw	r30, 0x02	; 2
    7f22:	dc 01       	movw	r26, r24
    7f24:	f8 12       	cpse	r15, r24
    7f26:	f4 cf       	rjmp	.-24     	; 0x7f10 <main+0x10c>
    7f28:	fe 01       	movw	r30, r28
    7f2a:	c7 be       	out	0x37, r12	; 55
    7f2c:	e8 95       	spm
    7f2e:	07 b6       	in	r0, 0x37	; 55
    7f30:	00 fc       	sbrc	r0, 0
    7f32:	fd cf       	rjmp	.-6      	; 0x7f2e <main+0x12a>
    7f34:	b7 be       	out	0x37, r11	; 55
    7f36:	e8 95       	spm
    7f38:	ad cf       	rjmp	.-166    	; 0x7e94 <main+0x90>
    7f3a:	84 37       	cpi	r24, 0x74	; 116
    7f3c:	71 f4       	brne	.+28     	; 0x7f5a <main+0x156>
    7f3e:	23 d0       	rcall	.+70     	; 0x7f86 <getch>
    7f40:	22 d0       	rcall	.+68     	; 0x7f86 <getch>
    7f42:	f8 2e       	mov	r15, r24
    7f44:	20 d0       	rcall	.+64     	; 0x7f86 <getch>
    7f46:	31 d0       	rcall	.+98     	; 0x7faa <verifySpace>
    7f48:	8e 01       	movw	r16, r28
    7f4a:	f8 01       	movw	r30, r16
    7f4c:	85 91       	lpm	r24, Z+
    7f4e:	8f 01       	movw	r16, r30
    7f50:	13 d0       	rcall	.+38     	; 0x7f78 <putch>
    7f52:	fa 94       	dec	r15
    7f54:	f1 10       	cpse	r15, r1
    7f56:	f9 cf       	rjmp	.-14     	; 0x7f4a <main+0x146>
    7f58:	9d cf       	rjmp	.-198    	; 0x7e94 <main+0x90>
    7f5a:	85 37       	cpi	r24, 0x75	; 117
    7f5c:	39 f4       	brne	.+14     	; 0x7f6c <main+0x168>
    7f5e:	25 d0       	rcall	.+74     	; 0x7faa <verifySpace>
    7f60:	8e e1       	ldi	r24, 0x1E	; 30
    7f62:	0a d0       	rcall	.+20     	; 0x7f78 <putch>
    7f64:	85 e9       	ldi	r24, 0x95	; 149
    7f66:	08 d0       	rcall	.+16     	; 0x7f78 <putch>
    7f68:	8f e0       	ldi	r24, 0x0F	; 15
    7f6a:	93 cf       	rjmp	.-218    	; 0x7e92 <main+0x8e>
    7f6c:	81 35       	cpi	r24, 0x51	; 81
    7f6e:	09 f0       	breq	.+2      	; 0x7f72 <main+0x16e>
    7f70:	a5 cf       	rjmp	.-182    	; 0x7ebc <main+0xb8>
    7f72:	88 e0       	ldi	r24, 0x08	; 8
    7f74:	14 d0       	rcall	.+40     	; 0x7f9e <watchdogConfig>
    7f76:	a2 cf       	rjmp	.-188    	; 0x7ebc <main+0xb8>

00007f78 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    7f78:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    7f7c:	95 ff       	sbrs	r25, 5
    7f7e:	fc cf       	rjmp	.-8      	; 0x7f78 <putch>
  UART_UDR = ch;
    7f80:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__RAM__+0xc6>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    7f84:	08 95       	ret

00007f86 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    7f86:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    7f8a:	87 ff       	sbrs	r24, 7
    7f8c:	fc cf       	rjmp	.-8      	; 0x7f86 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    7f8e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    7f92:	84 fd       	sbrc	r24, 4
    7f94:	01 c0       	rjmp	.+2      	; 0x7f98 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f96:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    7f98:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__RAM__+0xc6>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    7f9c:	08 95       	ret

00007f9e <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f9e:	e0 e6       	ldi	r30, 0x60	; 96
    7fa0:	f0 e0       	ldi	r31, 0x00	; 0
    7fa2:	98 e1       	ldi	r25, 0x18	; 24
    7fa4:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    7fa6:	80 83       	st	Z, r24
#else
  WDTCR= x;
#endif
}
    7fa8:	08 95       	ret

00007faa <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7faa:	ed df       	rcall	.-38     	; 0x7f86 <getch>
    7fac:	80 32       	cpi	r24, 0x20	; 32
    7fae:	19 f0       	breq	.+6      	; 0x7fb6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fb0:	88 e0       	ldi	r24, 0x08	; 8
    7fb2:	f5 df       	rcall	.-22     	; 0x7f9e <watchdogConfig>
    7fb4:	ff cf       	rjmp	.-2      	; 0x7fb4 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fb6:	84 e1       	ldi	r24, 0x14	; 20
    7fb8:	df cf       	rjmp	.-66     	; 0x7f78 <putch>

00007fba <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    7fba:	cf 93       	push	r28
    7fbc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fbe:	e3 df       	rcall	.-58     	; 0x7f86 <getch>
    7fc0:	c1 50       	subi	r28, 0x01	; 1
    7fc2:	e9 f7       	brne	.-6      	; 0x7fbe <getNch+0x4>
  verifySpace();
}
    7fc4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fc6:	f1 cf       	rjmp	.-30     	; 0x7faa <verifySpace>

00007fc8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    7fc8:	fc 01       	movw	r30, r24
    7fca:	0a 01       	movw	r0, r20
    7fcc:	67 bf       	out	0x37, r22	; 55
    7fce:	e8 95       	spm
    7fd0:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    7fd2:	07 b6       	in	r0, 0x37	; 55
    7fd4:	00 fc       	sbrc	r0, 0
    7fd6:	fd cf       	rjmp	.-6      	; 0x7fd2 <do_spm+0xa>
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    7fd8:	66 70       	andi	r22, 0x06	; 6
    7fda:	29 f0       	breq	.+10     	; 0x7fe6 <do_spm+0x1e>
    7fdc:	45 2b       	or	r20, r21
    7fde:	19 f4       	brne	.+6      	; 0x7fe6 <do_spm+0x1e>
    // Reenable read access to flash
    __boot_rww_enable_short();
    7fe0:	81 e1       	ldi	r24, 0x11	; 17
    7fe2:	87 bf       	out	0x37, r24	; 55
    7fe4:	e8 95       	spm
  }
#endif
}
    7fe6:	08 95       	ret
